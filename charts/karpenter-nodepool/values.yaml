# Default values for karpenter-nodepool.
# This Helm chart is compatible with Karpenter v1.6.x

nameOverride: ""

globalLabels: {}

globalAnnotations: {}

nodePool: {}
# Example NodePool configuration:
# default:
#     Labels are arbitrary key-values that are applied to all nodes
#     WARNING: Cannot use restricted domains like 'kubernetes.io' or 'node.kubernetes.io' 
#     These are reserved for Kubernetes/Karpenter internal use only
#     Valid examples: environment: staging, team: platform, billing-team: my-team
#   labels: {}
# 
#     Annotations are arbitrary key-values that are applied to all nodes
#     Annotations can use restricted domains (unlike labels)
#     Examples: cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
#   annotations: {}
#
#     References the Cloud Provider's NodeClass resource, see your cloud provider specific documentation  
#     REQUIRED: Must reference an existing EC2NodeClass for AWS
#   nodeClassRef:
#     group: karpenter.k8s.aws  # Updated in v1.5 - only single version served
#     kind: EC2NodeClass        # AWS-specific NodeClass
#     name: default             # Name of your EC2NodeClass resource
#
#     Provisioned nodes will have these taints
#     Taints may prevent pods from scheduling if they are not tolerated by the pod. 
#     Ex:
#     - key: example.com/special-taint
#       effect: NoSchedule
#   taints: []
#
#     Provisioned nodes will have these taints, but pods do not need to tolerate these taints to be provisioned by this
#     NodePool. These taints are expected to be temporary and some other entity (e.g. a DaemonSet) is responsible for
#     removing the taint after it has finished initializing the node.
#     Ex:
#     - key: example.com/special-taint
#       effect: NoSchedule 
#   startupTaints: []
#
#     The amount of time that a node can be draining before it's forcibly deleted. A node begins draining when a delete call is made against it, starting
#     its finalization flow. Pods with TerminationGracePeriodSeconds will be deleted preemptively before this terminationGracePeriod ends to give as much time to cleanup as possible.
#     If your pod's terminationGracePeriodSeconds is larger than this terminationGracePeriod, Karpenter may forcibly delete the pod
#     before it has its full terminationGracePeriod to cleanup.
#    
#     IMPORTANT in v1.5: When terminationGracePeriod is configured, nodes become eligible for Drift disruption 
#     even if pods have blocking PDBs or 'karpenter.sh/do-not-disrupt' annotations.
#     This ensures critical updates (like AMI updates for CVEs) can proceed.
#    
#     Used with expireAfter to enforce absolute maximum node lifetime:
#     Maximum node lifetime = expireAfter + terminationGracePeriod
#    
#     Note: changing this value in the nodepool will drift the nodeclaims.
#     Examples: "30s", "5m", "30m", "1h"
#   terminationGracePeriod: "5m"
#
#     Requirements that constrain the parameters of provisioned nodes.
#     These requirements are combined with pod.spec.topologySpreadConstraints, pod.spec.affinity.nodeAffinity, pod.spec.affinity.podAffinity, and pod.spec.nodeSelector rules.
#     Operators { In, NotIn, Exists, DoesNotExist, Gt, and Lt } are supported.
#     https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#operators
#     Requirements constrain the parameters of provisioned nodes
#     Karpenter v1.6 requirements for generic workloads:
#   requirements:
#     - key: "kubernetes.io/arch"
#       operator: In
#       values: ["amd64"]
#     - key: "kubernetes.io/os"
#       operator: In
#       values: ["linux"]
#     - key: "karpenter.sh/capacity-type"
#       operator: In
#       values: ["on-demand"]  # or ["spot", "on-demand"] for cost optimization
#     - key: "karpenter.k8s.aws/instance-category"
#       operator: In
#       values: ["c", "m", "r"]
#     - key: "karpenter.k8s.aws/instance-generation"
#       operator: Gt
#       values: ["2"]
#     # OPTIONAL: Additional constraints  
#     - key: "karpenter.k8s.aws/instance-cpu"
#       operator: In
#       values: ["2", "4", "8", "16", "32"]
#     - key: "karpenter.k8s.aws/instance-hypervisor"
#       operator: In
#       values: ["nitro"]
#     - key: "topology.kubernetes.io/zone"
#       operator: In
#       values: ["us-west-2a", "us-west-2b", "us-west-2c"]
#     - key: "karpenter.k8s.aws/instance-family"
#       operator: Exists
#       minValues: 3  # Ensure at least 3 instance families available
#
#     The amount of time a Node can live on the cluster before being removed
#     Avoiding long-running Nodes helps to reduce security vulnerabilities as well as to reduce the chance of issues that can plague Nodes with long uptimes such as file fragmentation or memory leaks from system processes
#     You can choose to disable expiration entirely by setting the string value 'Never' here
#   expireAfter: 720h
#
#     NOTE: In Karpenter v1.5+, Kubelet configuration has been MOVED to EC2NodeClass spec
#     This section is kept empty for v1.5 compatibility. Configure kubelet settings in ec2NodeClass section below.
#     Keeping this field for backward compatibility with chart structure
#   kubelet: {}
#   
#     Disruption section which describes the ways in which Karpenter can disrupt and replace Nodes
#     Configuration in this section constrains how aggressive Karpenter can be with performing operations
#     like rolling Nodes due to them hitting their maximum lifetime (expiry) or scaling down nodes to reduce cluster cost
#   disruption:
#     # Describes which types of Nodes Karpenter should consider for consolidation
#     # Valid values in Karpenter v1.6:
#     # - 'WhenEmpty': Only consolidate nodes that contain no workload pods (except daemonsets)
#     # - 'WhenEmptyOrUnderutilized': Consolidate both empty and underutilized nodes (DEFAULT)
#     # - 'Never': Disable consolidation entirely
#     consolidationPolicy: WhenEmptyOrUnderutilized
#     
#     # The amount of time Karpenter should wait after discovering a consolidation decision
#     # - With 'WhenEmpty': Wait after node becomes empty before considering consolidation
#     # - With 'WhenEmptyOrUnderutilized': Wait after pod schedules/removes before considering consolidation
#     # Default: 0s (immediate consolidation)
#     # Examples: "30s", "5m", "1h"
#     consolidateAfter: 0s
#     
#     # Optional: Disruption budgets to rate-limit voluntary disruptions (v1.6 supports cron schedule and duration)
#     # If undefined, defaults to one budget with "nodes: 10%"
#     # budgets:
#     #   - nodes: "10%"              # Allow up to 10% of nodes to be disrupted
#     #   - nodes: "5"                # Or maximum 5 nodes (static limit)
#     #     reasons: ["Empty"]        # Only apply to specific reasons
#     #   - nodes: "0"                # Block disruptions during specific times  
#     #     schedule: "@daily"        # Use cron syntax for scheduling
#     #     duration: "10m"           # Duration to enforce the budget
#     #     reasons: ["Underutilized"]
#   
#     Resource limits constrain the total size of the cluster.
#     Limits prevent Karpenter from creating new instances once the limit is exceeded.
#   limits:
#     cpu: 1000
#     memory: 1000Gi
#   
#     Priority given to the NodePool when the scheduler considers which NodePool
#     Higher weights indicate higher priority when comparing NodePools.
#     Specifying no weight is equivalent to specifying a weight of 0.
#     Example: weight: 10
#   weight: 10

ec2NodeClass: {}
# Example EC2NodeClass configuration:
# default:
#     Optional, dictates UserData generation and default block device mappings.
#     May be ommited when using an `alias` amiSelectorTerm, otherwise required.
#   amiFamily: AL2
#   
#     Required, discovers subnets to attach to instances
#     Each term in the array of subnetSelectorTerms is ORed together
#     Within a single term, all conditions are ANDed
#   subnetSelectorTerms:
#     - tags:
#         karpenter.sh/discovery: "my-cluster"
#     - name: my-subnet
#     - id: subnet-0123456789
#
#     Required, discovers security groups to attach to instances
#     Each term in the array of securityGroupSelectorTerms is ORed together
#     Within a single term, all conditions are ANDed
#   securityGroupSelectorTerms:
#     - tags:
#         karpenter.sh/discovery: "my-cluster"
#     - name: my-security-group
#     - id: sg-0123456789
#
#     Optional, IAM role to use for the node identity.
#     The "role" field is immutable after EC2NodeClass creation. This may change in the 
#     future, but this restriction is currently in place today to ensure that Karpenter 
#     avoids leaking managed instance profiles in your account.
#     Must specify one of "role" or "instanceProfile" for Karpenter to launch nodes
#   role: "KarpenterNodeInstanceProfile"
#
#     Optional, IAM instance profile to use for the node identity.
#     Must specify one of "role" or "instanceProfile" for Karpenter to launch nodes
#   instanceProfile: "" 
#   
#     Each term in the array of amiSelectorTerms is ORed together
#     Within a single term, all conditions are ANDed
#     v1.6: Recommended to use 'alias' for automatic EKS-optimized AMI selection (latest or pinned)
#   amiSelectorTerms:
#     # v1.6 approach - automatic EKS AMI selection:
#     - alias: al2@latest          # Latest Amazon Linux 2 EKS AMI
#     # - alias: al2023@latest       # Latest Amazon Linux 2023 EKS AMI  
#     # - alias: bottlerocket@latest # Latest Bottlerocket EKS AMI
#     # - alias: al2@v20240807       # Pinned AL2 version (recommended for production)
#     # Traditional tag/name/id selection (still supported):
#     # - tags:
#     #     karpenter.sh/discovery: "my-cluster"
#     # - name: "amazon-eks-node-al2-*"
#     # - id: ami-1234567890abcdef0
#
#     Optional, overrides autogenerated userdata with a merge semantic
#   userData: |-
#     #!/bin/bash
#     /etc/eks/bootstrap.sh my-cluster
#
#     Optional, each term in the array of capacityReservationSelectorTerms is ORed together.
#     NEW in v1.5: Capacity Reservations support (ALPHA feature)
#     Prioritizes on-demand capacity reservations before falling back to spot/on-demand
#   capacityReservationSelectorTerms: []
#     # - tags:
#     #     karpenter.sh/discovery: "my-cluster"
#     #     Environment: "staging"
#     # - id: cr-1234567890abcdef0
#
#     Optional, propagates tags to underlying EC2 resources
#   tags:
#     Environment: staging
#     Project: my-project
#
#     Optional, configures IMDS for the instance
#     v1.5 Security Best Practices - if omitted, Karpenter uses these secure defaults:
#   metadataOptions:
#     httpEndpoint: enabled                 # Allow IMDS access
#     httpProtocolIPv6: disabled           # Disable IPv6 IMDS
#     httpPutResponseHopLimit: 1           # v1.5 default: prevent container access to IMDS
#     httpTokens: required                 # Require IMDSv2 (secure token-based access)
#   
#     Optional, configures storage devices for the instance
#     v1.5 enhanced block device mapping with performance optimization
#   blockDeviceMappings:
#     # Production-ready example with GP3 and encryption:
#     - deviceName: /dev/xvda
#       ebs:
#         volumeSize: 100Gi
#         volumeType: gp3                    # Recommended: gp3 for better price/performance
#         iops: 3000                        # GP3 baseline: 3,000 IOPS
#         throughput: 125                   # GP3 baseline: 125 MB/s
#         encrypted: true                   # Always encrypt in production
#         deleteOnTermination: true         # Clean up on node termination
#
#     Optional, use instance-store volumes for node ephemeral-storage
#     v1.5 supports RAID0 for high-performance ephemeral storage on supported instance types
#   instanceStorePolicy: RAID0  # Enable RAID0 for maximum performance
#
#     Optional, configures detailed monitoring for the instance
#   detailedMonitoring: false
#
#     Optional, configures if the instance should be launched with an associated public IP address.
#     If not specified, the default value depends on the subnet's public IP auto-assign setting.
#   associatePublicIPAddress: false
#
#     NEW in v1.5: Kubelet configuration moved from NodePool to EC2NodeClass
#     Karpenter provides the ability to specify additional Kubelet args for EC2 instances.
#     These are all optional and provide support for additional customization and use cases.
#   kubelet:
#     clusterDNS: ["172.20.0.10"]
#     systemReserved:
#       cpu: 100m
#       memory: 100Mi
#       ephemeral-storage: 1Gi
#     kubeReserved:
#       cpu: 200m
#       memory: 100Mi
#       ephemeral-storage: 3Gi
#     evictionHard:
#       memory.available: 5%
#       nodefs.available: 10%
#       nodefs.inodesFree: 10%
#     evictionSoft:
#       memory.available: 500Mi
#       nodefs.available: 15%
#       nodefs.inodesFree: 15%
#     evictionSoftGracePeriod:
#       memory.available: 1m
#       nodefs.available: 1m30s
#       nodefs.inodesFree: 2m
#     evictionMaxPodGracePeriod: 60
#     imageGCHighThresholdPercent: 85
#     imageGCLowThresholdPercent: 80
#     cpuCFSQuota: true
#     podsPerCore: 2
#     maxPods: 110
